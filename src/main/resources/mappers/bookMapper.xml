<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mappers.bookMapper">
	
	<select id="selectBookList"  parameterType="string"  resultType="Book">
		select num as bookNum, 
			   tb1.name as bookName,
			   ifnull(tb2.status, 'Y') as rentalPossible,
			   tb2.name as rentalMan,
			   tb2.idx as rentalManIdx,
			   tb2.mine as mine
		  from books tb1
		  left outer join (
		  	select t1.*, t2.name, t2.idx, case when t1.member_idx = #{memberIdx} then 'Y' else 'N' end as mine
		  	  from rental_history t1
		  	  inner join members t2 on t1.member_idx=t2.idx
		  ) tb2 on tb1.num = tb2.book_num
		 where isExist = 'Y' 
		 order by tb1.num asc
	</select>
	
	<select id="selectBookDetail" parameterType="string" resultType="Book">
		select num as bookNum,
			   name as bookName,
			   e_name as bookEngName,
			   contents as bookContents,
			   link as bookLink
		  from books
		 where num = #{bookNum}
	</select>
	
	<select id="selectReadMemberList" parameterType="string" resultType="Account">
		select distinct t2.idx, t2.id, t2.name as userName
		  from return_history t1
		 inner join members t2 on t1.member_idx = t2.idx
		 where t1.book_num = #{bookNum}
		 order by t2.name asc
	</select>
	
	<select id="selectRentaledBookList" parameterType="string" resultType="Book">
		select num as bookNum, name as bookName
		  from books t1
		 inner join rental_history t2 on t1.num = t2.book_num
		 where t2.status = 'A'
		   and t2.member_idx != #{memberIdx}
	</select>
	
	<select id="selectRentaledBook" parameterType="string" resultType="int">
		select count(book_num)
		  from rental_history
		 where status = 'A'
		   and book_num = #{bookNum}
	</select>
	
	<insert id="insertReservation" parameterType="map">
		insert into reservation (book_num, member_idx)
		values (#{bookNum}, #{memberIdx})
	</insert>
	
	<!-- 대여중이 아니면서 예약대기자 -->
	<!-- 대여중이면 신청할 수 없다. -->
	<select id="selectPureReservation" parameterType="string" resultType="map">
		select concat(book_num, '') as bookNum, t3.name as bookName, concat(member_idx, '') as memberIdx, t2.name as memberName, t2.phone, t2.email
		  from reservation t1
		 inner join members t2 on t1.member_idx = t2.idx
		 inner join books t3 on t1.book_num = t3.num
		 where t1.book_num = #{bookNum}
		   and t1.member_idx not in (
		   	select member_idx from rental_history where status = 'A'
		   )
		 order by t1.reservation_date asc
		 limit 1
	</select>
	
	<select id="selectStatisticsReadBook" resultType="map">
		select concat(num, '.',  name) as label, ifnull(readCnt, 0) as y 
		  from books t1
		  left outer join (
		  	select book_num, count(*) as readCnt
		  	  from return_history
		  	 group by book_num
		  ) t2 on t1.num = t2.book_num
	</select>
</mapper>
