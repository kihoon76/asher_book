<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mappers.userMapper">
	<resultMap id="RM_selectUser" type="Account">
		<result column="idx" property="idx" javaType="string"/>
		<result column="id" property="id" javaType="string" />
		<result column="name" property="userName" javaType="string"/>
		<result column="pw" property="password" javaType="string"/>
		<result column="phone" property="phone" javaType="string"/>
		<result column="email" property="email" javaType="string"/>
	 	<collection property="authorities" column="idx" javaType="java.util.ArrayList"
	 				ofType="Authority" select="selectAuthorities" />
	</resultMap>
	
	<select id="selectUserInfo"  parameterType="string"  resultMap="RM_selectUser">
		select idx, id, name, pw, phone, email 
		  from members
		 where id = #{id}
	</select>
	
	<select id="selectAuthorities" parameterType="string" resultType="Authority">
		select auth_name as authName
		  from members_authorities
		 where members_idx = #{idx}
	</select>
	
	<select id="selectRentalHistory" parameterType="map" resultType="RentalHistory">
		select idx as idx,
			   member_idx as rentalManIdx,
			   book_num as bookNum,
			   rental_date as rentalDate,
			   return_date as returnDate,
			   returned as returned,
			   tb2.name as bookName
		  from rental_history tb1
		  inner join books tb2 on tb1.book_num = tb2.num
		  <where>
		  <if test="memberIdx != null">
		  	member_idx = #{memberIdx}
		  </if>
		  <if test="">
		  	and returned = #{returned} 
		  </if>
		  </where>
	</select>
	
	<select id="selectMyNotReturedBooks" parameterType="string" resultType="RentalHistory">
		select t1.idx as idx,
			   t1.member_idx as rentalManIdx,
			   t3.name as rentalMan,
			   DATE_FORMAT(rental_date, '%Y-%m-%d') as rentalDate,
			   DATE_FORMAT(return_date, '%Y-%m-%d') as returnDate,
			   t2.num as bookNum,
			   t2.name as bookName
		  from rental_history t1
		  inner join books t2 on t1.book_num = t2.num
		  inner join members t3 on t1.member_idx = t3.idx
		  where t1.returned = 'N'
		    and member_idx = #{idx}
		    and t1.status = 'A'
	</select>
	
	<select id="selectMyRentalHistories" parameterType="string" resultType="RentalHistory">
		select t1.idx as idx,
			   t1.member_idx as rentalManIdx,
			   t3.name as rentalMan,
			   DATE_FORMAT(rental_date, '%Y-%m-%d') as rentalDate,
			   DATE_FORMAT(real_return_date, '%Y-%m-%d') as returnDate,
			   t2.num as bookNum,
			   t2.name as bookName,
			   t1.return_expired as returnExpired
		  from rental_history t1
		  inner join books t2 on t1.book_num = t2.num
		  inner join members t3 on t1.member_idx = t3.idx
		  where t1.returned = 'Y'
		    and member_idx = #{idx}
	</select>
	
	<select id="selectUserRentalBookByNum" parameterType="string" resultType="RentalHistory">
		select t1.idx as idx,
			   t1.member_idx as rentalManIdx,
			   t3.name as rentalMan,
			   DATE_FORMAT(rental_date, '%Y-%m-%d') as rentalDate,
			   t2.num as bookNum,
			   t2.name as bookName,
			   t1.status as status
		  from rental_history t1
		  inner join books t2 on t1.book_num = t2.num
		  inner join members t3 on t1.member_idx = t3.idx
		  where t1.returned = 'N'
		    and book_num = #{bookNum}
		  limit 1
	</select>
	
	<insert id="insertApplyRental" parameterType="map">
		insert into rental_history(member_idx, book_num, rental_date, return_date, status, returned)
		values (#{memberIdx}, #{bookNum}, now(), date_add(now(), interval 7 day), 'R', 'N')
	</insert>
	
	<select id="selectRentalApplyList" resultType="RentalHistory">
		select t1.idx as idx,
			   t1.member_idx as rentalManIdx,
			   t3.name as rentalMan,
			   DATE_FORMAT(rental_date, '%Y-%m-%d') as rentalDate,
			   DATE_FORMAT(return_date, '%Y-%m-%d') as returnDate,
			   t2.num as bookNum,
			   t2.name as bookName,
			   t1.status as status
		  from rental_history t1
		  inner join books t2 on t1.book_num = t2.num
		  inner join members t3 on t1.member_idx = t3.idx
		  where t1.returned = 'N'
		  order by rentalManIdx
	</select>
	
	<update id="updateRentalApply" parameterType="map">
		update rental_history
		   set status = 'A',
		   	   rental_date = now(),
		   	   return_date = date_add(now(), interval 7 day)
		 where idx = #{rentalIdx}
		   and member_idx = #{rentalManIdx}
		   and book_num = #{bookNum}
	</update>
	
	<update id="updateReturnRental" parameterType="map">
		update rental_history
		   set returned = 'Y',
		   	   real_return_date = now(),
		   	   return_expired = case when datediff(now(), return_date) > 0 then 'Y'
		   	                         else 'N'
		   	                    end
		 where idx = #{rentalIdx}
		   and member_idx = #{rentalManIdx}
		   and book_num = #{bookNum}
	</update>
</mapper>
